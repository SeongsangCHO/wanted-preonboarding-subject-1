{"version":3,"sources":["api/getCommentData.js","hooks/useIntersectObserver.js","components/InfiniteScroll.js","App.js","reportWebVitals.js","index.js"],"names":["getCommentData","page","a","axios","get","params","_page","_limit","res","data","console","error","useIntersectObserver","intersectRef","useState","isIntersect","setIsIntersect","handleObserver","useCallback","entries","isIntersecting","options","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","current","observe","disconnect","InfiniteScroll","props","map","item","className","id","email","body","App","setPage","commentList","setCommentList","useRef","isLastPage","setIsLastPage","loadMoreCommentData","length","prev","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTASaA,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAERC,IAAMC,IAAN,UATJ,iDASiC,CAC7CC,OAAQ,CACNC,MAAOL,EACPM,OAXM,MAMgB,cAEpBC,EAFoB,yBAQnBA,EAAIC,MARe,gCAU1BC,QAAQC,MAAR,MAV0B,yDAAH,sDCmBZC,EA1Bc,SAACC,GAC5B,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAiBC,sBAAW,uCAAC,WAAOC,GAAP,SAAAjB,EAAA,sDAClBiB,EAAQ,GACZC,eACTJ,GAAe,GAEfA,GAAe,GALgB,2CAAD,sDAO/B,IACGK,EAAU,CACdC,KAAM,KACNC,WAAY,QACZC,UAAW,KAOb,OALAC,qBAAU,WACR,IAAMC,EAAW,IAAIC,qBAAqBV,EAAgBI,GAE1D,OADIR,EAAae,SAASF,EAASG,QAAQhB,EAAae,SACjD,kBAAMF,EAASI,gBACrB,CAACb,IACG,CACLF,gB,OCWWgB,EAhCQ,SAACC,GACtB,IAAQvB,EAASuB,EAATvB,KACR,OACE,6BACGA,EAAKwB,KAAI,SAACC,GACT,OACE,oBAAkBC,UAAU,kBAA5B,SACE,gCACE,sBAAKA,UAAU,8BAAf,UACE,4CACA,+BAAOD,EAAKE,QAEd,sBAAKD,UAAU,8BAAf,UACE,uCACA,+BAAOD,EAAKG,WAEd,sBAAKF,UAAU,uBAAf,UACE,0CACA,4BAAID,EAAKI,cAZNJ,EAAKE,UCoCTG,MAlCf,WACE,MAAwBzB,mBAAS,GAAjC,mBAAOb,EAAP,KAAauC,EAAb,KACA,EAAsC1B,mBAAS,IAA/C,mBAAO2B,EAAP,KAAoBC,EAApB,KACM7B,EAAe8B,iBAAO,MAC5B,EAAoC7B,oBAAS,GAA7C,mBAAO8B,EAAP,KAAmBC,EAAnB,KACQ9B,EAAgBH,EAAqBC,GAArCE,YAEF+B,EAAmB,uCAAG,4BAAA5C,EAAA,0DACtBa,EADsB,gCAELf,EAAeC,GAFV,OAIJ,KAFdQ,EAFkB,QAIfsC,OACPF,GAAc,IAEdH,EAAe,GAAD,mBAAKD,GAAL,YAAqBhC,KACnC+B,GAAQ,SAACQ,GAAD,OAAUA,EAAO,MARH,2CAAH,qDAezB,OAHAvB,qBAAU,WACRqB,MACC,CAAC/B,EAAa6B,IAEf,sBAAKT,UAAU,YAAf,UACE,cAAC,EAAD,CAAgB1B,KAAMgC,KACpBG,GACA,qBAAKR,GAAG,mBAAmBa,IAAKpC,EAAhC,4BCzBOqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a74584b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_ENDPOINT = `https://jsonplaceholder.typicode.com/comments`;\nconst LIMIT = 10;\n/*\n * _page = 1.. ++\n * _limit = 10 fix\n */\n\nexport const getCommentData = async (page) => {\n  try {\n    const res = await axios.get(`${API_ENDPOINT}`, {\n      params: {\n        _page: page,\n        _limit: LIMIT,\n      },\n    });\n    return res.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nconst useIntersectObserver = (intersectRef) => {\n  const [isIntersect, setIsIntersect] = useState(false);\n\n  const handleObserver = useCallback(async (entries) => {\n    const target = entries[0];\n    if (target.isIntersecting) {\n      setIsIntersect(true);\n    } else {\n      setIsIntersect(false);\n    }\n  }, []);\n  const options = {\n    root: null,\n    rootMargin: \"200px\",\n    threshold: 0.01,\n  };\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleObserver, options);\n    if (intersectRef.current) observer.observe(intersectRef.current);\n    return () => observer.disconnect();\n  }, [handleObserver]);\n  return {\n    isIntersect,\n  };\n};\n\nexport default useIntersectObserver;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst InfiniteScroll = (props) => {\n  const { data } = props;\n  return (\n    <ul>\n      {data.map((item) => {\n        return (\n          <li key={item.id} className=\"comment-wrapper\">\n            <div>\n              <div className=\"comment-info-wrapper inline\">\n                <h4>Comment Id</h4>\n                <span>{item.id}</span>\n              </div>\n              <div className=\"comment-info-wrapper inline\">\n                <h4>Email</h4>\n                <span>{item.email}</span>\n              </div>\n              <div className=\"comment-info-wrapper\">\n                <h4> Comment</h4>\n                <p>{item.body}</p>\n              </div>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nInfiniteScroll.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default InfiniteScroll;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { getCommentData } from \"./api/getCommentData\";\nimport useIntersectObserver from \"./hooks/useIntersectObserver\";\nimport InfiniteScroll from \"./components/InfiniteScroll\";\n/*\n! data fetching done\n! 스크롤 맨 밑에 다다랐을 때, 다음 페이지 넘버를 갖게되는 hook\n! 피그마 디자인 퍼블리싱\n*/\n\nfunction App() {\n  const [page, setPage] = useState(1);\n  const [commentList, setCommentList] = useState([]);\n  const intersectRef = useRef(null);\n  const [isLastPage, setIsLastPage] = useState(false);\n  const { isIntersect } = useIntersectObserver(intersectRef);\n\n  const loadMoreCommentData = async () => {\n    if (isIntersect) {\n      const data = await getCommentData(page);\n\n      if (data.length === 0) {\n        setIsLastPage(true);\n      } else {\n        setCommentList([...commentList, ...data]);\n        setPage((prev) => prev + 1);\n      }\n    }\n  };\n  useEffect(() => {\n    loadMoreCommentData();\n  }, [isIntersect, isLastPage]);\n  return (\n    <div className=\"container\">\n      <InfiniteScroll data={commentList} />\n      {!isLastPage && (\n        <div id=\"intersectElement\" ref={intersectRef}>\n          Loading...\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}