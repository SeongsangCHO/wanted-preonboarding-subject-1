{"version":3,"sources":["api/getCommentData.js","constants/index.js","hooks/useIntersectObserver.js","components/CommentList.js","App.js","reportWebVitals.js","index.js"],"names":["getCommentData","page","a","axios","get","params","_page","_limit","res","data","console","error","useIntersectObserver","intersectRef","optionsObject","root","rootMargin","threshold","useState","isIntersect","setIsIntersect","handleObserver","entries","isIntersecting","options","useEffect","observer","IntersectionObserver","current","observe","disconnect","CommentItem","props","item","className","id","email","body","CommentList","map","App","setPage","commentList","setCommentList","useRef","isLastPage","setIsLastPage","loadMoreCommentData","length","prev","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAERC,IAAMC,IAAN,UCLJ,iDDKiC,CAC7CC,OAAQ,CACNC,MAAOL,EACPM,OCP2B,MDEL,cAEpBC,EAFoB,yBAQnBA,EAAIC,MARe,gCAU1BC,QAAQC,MAAR,MAV0B,yDAAH,sDE4BZC,EA7Bc,SAACC,EAAcC,GAE1C,MAAuDA,EAA/CC,YAAR,MAAe,KAAf,IAAuDD,EAAlCE,kBAArB,MAAkC,MAAlC,EAAyCC,EAAcH,EAAdG,UAEzC,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAiB,SAACC,GACPA,EAAQ,GACZC,eACTH,GAAe,GAEfA,GAAe,IAGbI,EAAU,CACdT,KAAMA,EACNC,WAAYA,EACZC,UAAWA,GAOb,OALAQ,qBAAU,WACR,IAAMC,EAAW,IAAIC,qBAAqBN,EAAgBG,GAE1D,OADIX,EAAae,SAASF,EAASG,QAAQhB,EAAae,SACjD,kBAAMF,EAASI,gBACrB,IACI,CACLX,gB,OCxBEY,EAAc,SAACC,GACnB,IAAQC,EAASD,EAATC,KACR,OACE,oBAAIC,UAAU,kBAAd,SACE,gCACE,sBAAKA,UAAU,8BAAf,UACE,4CACA,+BAAOD,EAAKE,QAEd,sBAAKD,UAAU,8BAAf,UACE,uCACA,+BAAOD,EAAKG,WAEd,sBAAKF,UAAU,uBAAf,UACE,0CACA,4BAAID,EAAKI,gBAyBJC,EAlBK,SAACN,GACnB,IAAQvB,EAASuB,EAATvB,KACR,OACE,6BACGA,EAAK8B,KAAI,SAACN,GACT,OAAO,cAAC,EAAD,CAAaA,KAAMA,GAAWA,EAAKE,UCcnCK,MAtCf,WACE,MAAwBtB,mBAAS,GAAjC,mBAAOjB,EAAP,KAAawC,EAAb,KACA,EAAsCvB,mBAAS,IAA/C,mBAAOwB,EAAP,KAAoBC,EAApB,KACM9B,EAAe+B,iBAAO,MAC5B,EAAoC1B,oBAAS,GAA7C,mBAAO2B,EAAP,KAAmBC,EAAnB,KACQ3B,EAAgBP,EAAqBC,EAAc,CACzDG,WAAY,QACZC,UAAW,MAFLE,YAKF4B,EAAmB,uCAAG,4BAAA7C,EAAA,0DACtBiB,EADsB,gCAELnB,EAAeC,GAFV,OAIJ,KAFdQ,EAFkB,QAIfuC,OAEPF,GAAc,IAEdH,EAAe,GAAD,mBAAKD,GAAL,YAAqBjC,KACnCgC,GAAQ,SAACQ,GAAD,OAAUA,EAAO,MATH,2CAAH,qDAgBzB,OAHAxB,qBAAU,WACRsB,MACC,CAAC5B,EAAa0B,IAEf,sBAAKX,UAAU,YAAf,UACE,cAAC,EAAD,CAAazB,KAAMiC,KACjBG,GACA,qBAAKV,GAAG,mBAAmBe,IAAKrC,EAAhC,4BCrBOsC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.3d7f2d2d.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { API_ENDPOINT, COMMENT_DATA_MAXIMUM_COUNT } from \"../constants\";\n\nexport const getCommentData = async (page) => {\n  try {\n    const res = await axios.get(`${API_ENDPOINT}`, {\n      params: {\n        _page: page,\n        _limit: COMMENT_DATA_MAXIMUM_COUNT,\n      },\n    });\n    return res.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","const API_ENDPOINT = `https://jsonplaceholder.typicode.com/comments`;\nconst COMMENT_DATA_MAXIMUM_COUNT = 10;\n\nexport { API_ENDPOINT, COMMENT_DATA_MAXIMUM_COUNT };\n","import React, { useState, useEffect } from \"react\";\n\nconst useIntersectObserver = (intersectRef, optionsObject) => {\n  // IntersectObserver의 option들을 지정하지 않는 경우를 대비해 root, margin을 default로 지정 [재사용성을 고려]\n  const { root = null, rootMargin = \"0px\", threshold } = optionsObject;\n\n  const [isIntersect, setIsIntersect] = useState(false);\n\n  const handleObserver = (entries) => {\n    const target = entries[0];\n    if (target.isIntersecting) {\n      setIsIntersect(true);\n    } else {\n      setIsIntersect(false);\n    }\n  };\n  const options = {\n    root: root,\n    rootMargin: rootMargin,\n    threshold: threshold,\n  };\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleObserver, options);\n    if (intersectRef.current) observer.observe(intersectRef.current);\n    return () => observer.disconnect();\n  }, []);\n  return {\n    isIntersect,\n  };\n};\n\nexport default useIntersectObserver;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CommentItem = (props) => {\n  const { item } = props;\n  return (\n    <li className=\"comment-wrapper\">\n      <div>\n        <div className=\"comment-info-wrapper inline\">\n          <h4>Comment Id</h4>\n          <span>{item.id}</span>\n        </div>\n        <div className=\"comment-info-wrapper inline\">\n          <h4>Email</h4>\n          <span>{item.email}</span>\n        </div>\n        <div className=\"comment-info-wrapper\">\n          <h4> Comment</h4>\n          <p>{item.body}</p>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nconst CommentList = (props) => {\n  const { data } = props;\n  return (\n    <ul>\n      {data.map((item) => {\n        return <CommentItem item={item} key={item.id} />;\n      })}\n    </ul>\n  );\n};\n\nCommentList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nCommentItem.propTypes = {\n  item: PropTypes.object.isRequired,\n};\nexport default CommentList;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { getCommentData } from \"./api/getCommentData\";\nimport useIntersectObserver from \"./hooks/useIntersectObserver\";\nimport CommentList from \"./components/CommentList\";\n\nfunction App() {\n  const [page, setPage] = useState(1);\n  const [commentList, setCommentList] = useState([]);\n  const intersectRef = useRef(null);\n  const [isLastPage, setIsLastPage] = useState(false);\n  const { isIntersect } = useIntersectObserver(intersectRef, {\n    rootMargin: \"200px\",\n    threshold: 0.01,\n  });\n\n  const loadMoreCommentData = async () => {\n    if (isIntersect) {\n      const data = await getCommentData(page);\n\n      if (data.length === 0) {\n        //요청 페이지 데이터를 모두 load해,  더 이상 가져올 데이터가 없을 때 == 마지막 페이지 임을 알리는 state\n        setIsLastPage(true);\n      } else {\n        setCommentList([...commentList, ...data]);\n        setPage((prev) => prev + 1);\n      }\n    }\n  };\n  useEffect(() => {\n    loadMoreCommentData();\n  }, [isIntersect, isLastPage]);\n  return (\n    <div className=\"container\">\n      <CommentList data={commentList} />\n      {!isLastPage && (\n        <div id=\"intersectElement\" ref={intersectRef}>\n          Loading...\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/*\n * React의 성능을 측정하기 위한 파일\n */\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}